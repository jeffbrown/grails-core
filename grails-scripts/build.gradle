configurations {
    scripts
}

dependencies {
    // Testing
    compile "junit:junit:${junitVersion}"

    scripts project(":grails-web"),
            project(':grails-docs'),
            project(':grails-plugin-controllers'),
            project(':grails-plugin-log4j'),
            project(":grails-test"),
            project(":grails-plugin-testing")
            project(":grails-resources")

    compile "org.fusesource.jansi:jansi:$jansiVersion",
        "jline:jline:$jlineVersion",
        "net.java.dev.jna:jna:$jnaVersion"

    // Ant
    compile "org.apache.ant:ant:${antVersion}",
        "org.apache.ant:ant-launcher:${antVersion}",
        "org.apache.ivy:ivy:${ivyVersion}"

    compile "org.apache.ant:ant-trax:${antTraxVersion}", {
        exclude group:"org.apache.ant", module:"ant"
    }

    compile("org.apache.ant:ant-junit:${antVersion}") {
        exclude group:'junit',module:'junit'
    }

    compile("org.codehaus.gant:gant_groovy1.8:${gantVersion}") {
        exclude group:'commons-cli', module:'commons-cli'
    }
}

sourceSets {
    main {
        compileClasspath += files(configurations.scripts)
        groovy.srcDirs = ['../scripts']
    }
}


eclipse {
    classpath {
        file {
            whenMerged { classpath ->
                // update ../scripts -> scripts
                def scriptsSrc = classpath.entries.find { entry -> entry?.kind == 'src' && entry?.path == '../scripts' }
                if (scriptsSrc) scriptsSrc.path='scripts'
            }
        }
    }

    project {
        linkedResource name: 'scripts', type: '2', location: new File('../scripts').canonicalPath
    }
}
